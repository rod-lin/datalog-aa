#ifdef IN_DSL
    #include "Common.datalog"
    {
        var(i); var(x); var(y); var(z);
        var(p); var(q);

        // p = *q
        pointsTo(p, y) <<= load(p, q) & pointsTo(q, x) & pointsTo(x, y);

        // *p = q
        pointsTo(y, x) <<= store(q, p) & pointsTo(q, x) & pointsTo(p, y);

        // p = q
        pointsTo(p, x) <<= copy(p, q) & pointsTo(q, x);

        // translating instructions to abstract operations
        load(p, q) <<= instrLoad(p, q);
        store(p, q) <<= instrStore(i, p, q);
        pointsTo(p, x) <<= instrAlloca(p, x);
        copy(p, q) <<= instrGetelementptr(p, q);
        copy(p, q) <<= instrBitCast(p, q);
        copy(p, ANY_OBJECT) <<= instrIntToPtr(p, _);
        copy(p, q) <<= instrPHI(p) & hasOperand(p, q);

        // ANY_OBJECT points to anything
        pointsTo(ANY_OBJECT, x) <<= object(x) & !nonaddressable(x);
        
        // unknown instructions can do anything to its operands
        pointsTo(i, x) <<= instrUnknown(i)
                         & object(x)
                         & !nonaddressable(x);

        pointsTo(y, z) <<= instrUnknown(i)
                         & hasOperand(i, x)
                         & pointsToIndirectly(x, y)
                         & object(z)
                         & !immutable(y)
                         & !nonaddressable(z);
        // TODO: unknown instruction can potentially change all globals
    }
#endif // #ifdef IN_DSL
